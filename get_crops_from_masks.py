import numpy as np
from scipy import ndimage

def get_largest_region_crop(mask):
    # Label connected components in the binary mask
    labeled_mask, num_labels = ndimage.label(mask)

    # Calculate properties of each labeled region
    regions = ndimage.find_objects(labeled_mask)

    # Find the largest region
    largest_region_index = max(range(1, num_labels + 1), key=lambda i: np.sum(labeled_mask == i))

    # Extract the region corresponding to the largest label
    largest_region_slice = regions[largest_region_index - 1]

    # Handle the case where the region is not found
    if largest_region_slice is None:
        return None

    start_row, start_col = largest_region_slice[0].start, largest_region_slice[1].start
    end_row, end_col = largest_region_slice[0].stop, largest_region_slice[1].stop

    # Extract the crop from the largest region
    largest_region_crop = mask[start_row:end_row, start_col:end_col]

    return {
        'coordinates': (start_row, start_col, end_row, end_col),
        'height': end_row - start_row,
        'width': end_col - start_col,
        'largest_region_crop': largest_region_crop
    }

# Example usage:
mask = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0],
                    [0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0]])

result = get_largest_region_crop(mask)

# apply 
print(result)
